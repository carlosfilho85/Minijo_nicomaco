import bpy
import math
import random

SUM = 20

# Função para deletar todos os objetos da cena
def deleteAll():
    bpy.ops.object.select_all(action="SELECT")
    bpy.ops.object.delete()
    
# Função para mover cubos de acordo com a paridade de p
def move_cube(i,p):
    if i > p:
        if p % 2 == 0: 
            bpy.ops.transform.translate(value=(i*i,(p-1)*i,10))
        else:
            bpy.ops.transform.translate(value=(p*i,i*i,10))
    else:
        bpy.ops.transform.translate(value=(i*i,i*i,10))

# Função para mover meio cubo
def move_half_cube(i,p,half):
    if i > p:
        if half:
            bpy.ops.transform.translate(value=((i/2)+(i*(p-1)),i*i,10)) 
        else:
            bpy.ops.transform.translate(value=(i*i,(i/2)+(i*(p-1)),10))
    else:
        if half:
            bpy.ops.transform.translate(value=((i*i)+(i/2),i*i,10))
        else:
            bpy.ops.transform.translate(value=((i*i)-(i/2),i*i,10))

# Função para criar material com cor aleatória
def create_random_color_material():
    mat = bpy.data.materials.new(name="Material_Cube")
    mat.use_nodes = True
    bsdf = mat.node_tree.nodes["Principled BSDF"]
    bsdf.inputs["Base Color"].default_value = (random.random(), random.random(), random.random(), 1)  # RGBA
    return mat

# Função principal que demonstra o teorema de Nicômaco
def nicomaco():
    bpy.ops.mesh.primitive_cube_add()
    z = 0
    for i in range(1,SUM, 1):
        z += i
    bpy.ops.transform.resize(value=(z, z, 1))
    bpy.ops.transform.translate(value=(z, z, 0.5))
    
    for i in range(1, SUM,1):
        for p in range(1, i+1, 1):
            bpy.ops.mesh.primitive_cube_add()
            mat = create_random_color_material()  # Cria uma cor aleatória para cada cubo
            bpy.context.object.data.materials.append(mat)  # Aplica o material ao cubo
            
            if i % 2 == 0:
                if p != i:
                    bpy.ops.transform.resize(value=(i/2,i,1))
                    bpy.ops.transform.rotate(value=(math.pi/2), orient_axis="Z")
                    move_half_cube(i,p,False)
                    bpy.ops.mesh.primitive_cube_add()
                    bpy.ops.transform.resize(value=(i/2,i,1))
                    move_half_cube(i,p,True)
                    mat = create_random_color_material()  # Nova cor para o segundo cubo
                    bpy.context.object.data.materials.append(mat)
                else:
                    bpy.ops.transform.resize(value=(i/2,i,1))
                    move_half_cube(i,p,False)
                    bpy.ops.mesh.primitive_cube_add()
                    bpy.ops.transform.resize(value=(i/2,i,1))
                    move_half_cube(i,p,True)
                    mat = create_random_color_material()  # Nova cor para o cubo final
                    bpy.context.object.data.materials.append(mat)
            else:
                bpy.ops.transform.resize(value=(i,i,1))
                move_cube(i,p)
    
deleteAll()
nicomaco()
