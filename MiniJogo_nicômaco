import bpy
import math

SUM = 10  

def deleteAll():
    bpy.ops.object.select_all(action="SELECT")
    bpy.ops.object.delete()

def add_wireframe_modifier(obj):
    mod = obj.modifiers.new(name="Wireframe", type='WIREFRAME')
    mod.thickness = 0.02  # Ajuste a espessura das bordas conforme necessário
    mod.use_replace = False  # Mantém as faces originais do cubo

def create_material(color):
    mat = bpy.data.materials.new(name="Material")
    mat.diffuse_color = (*color, 1)  # Define a cor no formato RGBA (Alpha = 1)
    return mat

def assign_color(obj, color):
    mat = create_material(color)
    if obj.data.materials:
        obj.data.materials[0] = mat
    else:
        obj.data.materials.append(mat)

def get_color_by_index(i):
    colors = [
        (1, 0, 0),  # Vermelho
        (1, 1, 0),  # Amarelo
        (0, 1, 0),  # Verde
        (0, 0, 1),  # Azul
        (0.5, 0, 0.5),  # Roxo
        # Adicione mais cores conforme necessário
    ]
    return colors[i % len(colors)]  # Cicla através da lista de cores

def move_cube(i, p):
    if i > p:
        if p % 2 == 0: 
            bpy.ops.transform.translate(value=(i*i, (p-1)*i, 10))
        else:
            bpy.ops.transform.translate(value=(p*i, i*i, 10))
    else:
        bpy.ops.transform.translate(value=(i*i, i*i, 10))

def move_half_cube(i, p, half):
    if i > p:
        if half:
            bpy.ops.transform.translate(value=((i/2)+(i*(p-1)), i*i, 10)) 
        else:
            bpy.ops.transform.translate(value=(i*i, (i/2)+(i*(p-1)), 10))
    else:
        if half:
            bpy.ops.transform.translate(value=((i*i)+(i/2), i*i, 10))
        else:
            bpy.ops.transform.translate(value=((i*i)-(i/2), i*i, 10))

def nicomaco():
    z = 0
    for i in range(1, SUM):
        z += i
        # Adiciona o cubo central (base) redimensionado
        bpy.ops.mesh.primitive_cube_add()
        bpy.ops.transform.resize(value=(i, i, 1))
        bpy.ops.transform.translate(value=(z, z, 0.5))
        obj = bpy.context.object
        assign_color(obj, get_color_by_index(i))  # Atribui uma cor baseada no valor de i
        add_wireframe_modifier(obj)  # Adiciona o modificador Wireframe
        
        for p in range(1, i+1):
            if i % 2 == 0:
                if p != i:
                    bpy.ops.mesh.primitive_cube_add()
                    bpy.ops.transform.resize(value=(i/2, i, 1))
                    bpy.ops.transform.rotate(value=(math.pi/2), orient_axis="Z")
                    move_half_cube(i, p, False)
                    obj = bpy.context.object
                    assign_color(obj, get_color_by_index(i))
                    add_wireframe_modifier(obj)
                    
                    bpy.ops.mesh.primitive_cube_add()
                    bpy.ops.transform.resize(value=(i/2, i, 1))
                    move_half_cube(i, p, True)
                    obj = bpy.context.object
                    assign_color(obj, get_color_by_index(i))
                    add_wireframe_modifier(obj)
                else:
                    bpy.ops.mesh.primitive_cube_add()
                    bpy.ops.transform.resize(value=(i/2, i, 1))
                    move_half_cube(i, p, False)
                    obj = bpy.context.object
                    assign_color(obj, get_color_by_index(i))
                    add_wireframe_modifier(obj)
                    
                    bpy.ops.mesh.primitive_cube_add()
                    bpy.ops.transform.resize(value=(i/2, i, 1))
                    move_half_cube(i, p, True)
                    obj = bpy.context.object
                    assign_color(obj, get_color_by_index(i))
                    add_wireframe_modifier(obj)
            else:
                bpy.ops.mesh.primitive_cube_add()
                bpy.ops.transform.resize(value=(i, i, 1))
                move_cube(i, p)
                obj = bpy.context.object
                assign_color(obj, get_color_by_index(i))
                add_wireframe_modifier(obj)

deleteAll()
nicomaco()

