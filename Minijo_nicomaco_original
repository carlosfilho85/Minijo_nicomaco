import bpy
import math

SUM = 20
def deleteAll():
    bpy.ops.object.select_all(action="SELECT")
    bpy.ops.object.delete()
    
def move_cube(i,p):
    if i > p:
        if p % 2 == 0: 
            bpy.ops.transform.translate(value=(i*i,(p-1)*i,10))
        else:
            bpy.ops.transform.translate(value=(p*i,i*i,10))
    else:
        bpy.ops.transform.translate(value=(i*i,i*i,10))

def move_half_cube(i,p,half):
    if i > p:
        if half == True:
            bpy.ops.transform.translate(value=((i/2)+(i*(p-1)),i*i,10)) 
        else:
            bpy.ops.transform.translate(value=(i*i,(i/2)+(i*(p-1)),10))
    else:
        if half == True:
            bpy.ops.transform.translate(value=((i*i)+(i/2),i*i,10))
        else:
            bpy.ops.transform.translate(value=((i*i)-(i/2),i*i,10))


def nicomaco():
    bpy.ops.mesh.primitive_cube_add()
    z = 0
    for i in range(1,SUM, 1):
        z += i
    bpy.ops.transform.resize(value=(z, z, 1))
    bpy.ops.transform.translate(value=(z, z, 0.5))
    
    for i in range(1, SUM,1):
        for p in range(1, i+1, 1):
            bpy.ops.mesh.primitive_cube_add()
            if i % 2 == 0:
                if p != i:
                    bpy.ops.transform.resize(value=(i/2,i,1))
                    bpy.ops.transform.rotate(value=(math.pi/2), orient_axis="Z")
                    move_half_cube(i,p,False)
                    bpy.ops.mesh.primitive_cube_add()
                    bpy.ops.transform.resize(value=(i/2,i,1))
                    move_half_cube(i,p,True)
                else:
                    bpy.ops.transform.resize(value=(i/2,i,1))
                    move_half_cube(i,p,False)
                    bpy.ops.mesh.primitive_cube_add()
                    bpy.ops.transform.resize(value=(i/2,i,1))
                    move_half_cube(i,p,True)
            else:
                bpy.ops.transform.resize(value=(i,i,1))
                move_cube(i,p)
    


deleteAll()
nicomaco()
